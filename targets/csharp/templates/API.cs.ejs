using System;
using System.IO;
using System.Threading.Tasks;

using Newtonsoft.Json;

using PlayFab.Internal;
using PlayFab.<%- api.name %>Models;


namespace PlayFab
{

	<% if(api.description) { %>
	/// <summary>
	/// <%- api.description %>
	/// </summary><% } %>
    public class PlayFab<%- api.name %>API
    {
		<% for(var i in api.calls) { var apiCall = api.calls[i]; %>
		<% if(apiCall.summary) { %>
		/// <summary>
		/// <%- apiCall.summary %>
		/// </summary><% } %>
        public static async Task<PlayFabResult<<%- apiCall.result %>>> <%- apiCall.name %>Async(<%- apiCall.request %> request)
        {
            <%- getRequestActions(apiCall, api) %>
            object httpResult = await PlayFabHTTP.DoPost(<%- getUrlAccessor(apiCall) %> + "<%- apiCall.url %>", request, <%- getAuthParams(apiCall) %>);
            if(httpResult is PlayFabError)
            {
                PlayFabError error = (PlayFabError)httpResult;
                if (PlayFabSettings.GlobalErrorHandler != null)
                    PlayFabSettings.GlobalErrorHandler(error);
                return new PlayFabResult<<%- apiCall.result %>>
                {
                    Error = error,
                };
            }
            string resultRawJson = (string)httpResult;

            var serializer = JsonSerializer.Create(PlayFabSettings.JsonSettings);
            var resultData = serializer.Deserialize<PlayFabJsonSuccess<<%- apiCall.result %>>>(new JsonTextReader(new StringReader(resultRawJson)));
			
			<%- apiCall.result %> result = resultData.data;
			<%- getResultActions(apiCall, api) %>
			
            return new PlayFabResult<<%- apiCall.result %>>
                {
                    Result = result
                };
        }<% } %>

        <% if(authKey) { %>
		private static string AuthKey = null;
		<% } %>
    }
}
