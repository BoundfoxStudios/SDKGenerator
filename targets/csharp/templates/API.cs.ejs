using PlayFab.<%- api.name %>Models;
using PlayFab.Internal;
using PlayFab.Json;
using System;
using System.Threading.Tasks;

namespace PlayFab
{
<%- GenerateSummary("    ", api, "description")
%>    public class PlayFab<%- api.name %>API
    {
<% for(var i in api.calls) { var apiCall = api.calls[i];
%><%- GenerateSummary("        ", apiCall, "summary")
%><%- GetDeprecationAttribute("        ", apiCall)
%>        public static async Task<PlayFabResult<<%- apiCall.result %>>> <%- apiCall.name %>Async(<%- apiCall.request %> request)
        {
<%- GetRequestActions(apiCall, api) %>
            var httpResult = await PlayFabHttp.DoPost("<%- apiCall.url %>", request, <%- GetAuthParams(apiCall) %>);
            if(httpResult is PlayFabError)
            {
                var error = (PlayFabError)httpResult;
                if (PlayFabSettings.GlobalErrorHandler != null)
                    PlayFabSettings.GlobalErrorHandler(error);
                return new PlayFabResult<<%- apiCall.result %>> { Error = error, };
            }

            var resultRawJson = (string)httpResult;
            var resultData = JsonWrapper.DeserializeObject<PlayFabJsonSuccess<<%- apiCall.result %>>>(resultRawJson);
            var result = resultData.data;
<%- GetResultActions(apiCall, api) %>
            return new PlayFabResult<<%- apiCall.result %>> { Result = result };
        }

<% } %><% if(authKey) {
%>        private static string _authKey;

        // Determine if the _authKey is set, without actually making it public
        public static bool IsClientLoggedIn()
        {
            return !string.IsNullOrEmpty(_authKey);
        }

        private static async Task<PlayFabResult<AttributeInstallResult>> MultiStepClientLogin(bool needsAttribution)
        {
            if (needsAttribution && !PlayFabSettings.DisableAdvertising && !string.IsNullOrEmpty(PlayFabSettings.AdvertisingIdType) && !string.IsNullOrEmpty(PlayFabSettings.AdvertisingIdValue))
            {
                var request = new AttributeInstallRequest();
                if (PlayFabSettings.AdvertisingIdType == PlayFabSettings.AD_TYPE_IDFA)
                    request.Idfa = PlayFabSettings.AdvertisingIdValue;
                else if (PlayFabSettings.AdvertisingIdType == PlayFabSettings.AD_TYPE_ANDROID_ID)
                    request.Adid = PlayFabSettings.AdvertisingIdValue;
                else
                    return null;
                return await AttributeInstallAsync(request);
            }
            return null;
        }
<% } %>    }
}
