using System;
using System.IO;
using System.Collections.Generic;
using Newtonsoft.Json;


namespace PlayFab
{
	public class <%- testData.name %>
	{
		public static JsonSerializer Serializer = JsonSerializer.Create(PlayFabSettings.JsonSettings);
        
        public static TypeT Deserialize<TypeT>(string input) where TypeT : class
        {
            return Serializer.Deserialize<TypeT>(new JsonTextReader(new StringReader(input)));
        }
		
		public static void Error(string message)
        {
            throw new Exception(message);
        }

        public static void Error(PlayFabError error)
        {
            throw new Exception(error.ErrorMessage);
        }

        public static void Start()
        {
            var task = PlayFabTestAPI.ResetTestTitle(new TestModels.ResetTestTitleRequest());
            task.Wait();
            var result = task.Result;
            if(result.Error != null)
            {
                PlayFabError error = result.Error;
                Error(error);
            }

			<%- testData.tests[0].name %>();
        }

		<% for(var t in testData.tests) { var test = testData.tests[t] %>
		public static void <%- test.name %>()
		{
			var req = Deserialize<<%- test.api %>Models.<%- apiLookup[test.api].callLookup[test.call].request %>>("<%- getJsonString( test.request ) %>");
			var task = PlayFab<%- test.api %>API.<%- test.call %>Async(req);
            task.Wait(<%- test.timeout || "2000" %>);
            var result = task.Result;
			PlayFabError error = result.Error;
			<% if(test.error) { %>
			if(error == null)
            {
                Error("Expected an error here");
				return;
            }
			if(error.Error != PlayFabErrorCode.<%- test.error %>)
			{
				Error("Expected a different error here");
				return;
			}
			<% } if(test.result) { %>
			if(error != null)
            {
                Error(error);
				return;
            }
			var actual = result.Result;
			var expected = Deserialize<<%- test.api %>Models.<%- apiLookup[test.api].callLookup[test.call].result %>>("<%- getJsonString( test.result ) %>");
			<% var expectedList = getExpectedDataList(test); for(var l in  expectedList) { var dataName = expectedList[l] %>
			if(actual.<%- dataName %> != expected.<%- dataName %>) { Error("Wrong value for <%- dataName %>"); }<% } %>
			<% } %>
			
			<% if(t < testData.tests.length-1) { var next = parseInt(t)+1 %>
			<%- testData.tests[next].name %>();
			<% } else { %>
			Done();
			<% } %>
		}
		<% } %>
		
		public static void Done()
		{
			
		}
	}
}
