<% if(api.name == "Admin"){%>#if ENABLE_PLAYFABADMIN_API<%}else if(api.name == "Server" || api.name == "Matchmaker"){%>#if ENABLE_PLAYFABSERVER_API<%}else{%>#if !DISABLE_PLAYFABCLIENT_API<%}%>
using System;
using System.Collections.Generic;
using PlayFab.<%- api.name %>Models;
using PlayFab.Internal;
using PlayFab.Json;

namespace PlayFab
{
<%- generateSummary("    ", api, "description")
%>    public static class PlayFab<%- api.name %>API
    {
        static PlayFab<%- api.name %>API() {}
<%if(api.name == "Client") { %>
        /// <summary>
        /// Check to See if the client is logged in.
        /// </summary>
        public static bool IsClientLoggedIn()
        {
            return PlayFabHttp.IsClientLoggedIn();
        }

        /// <summary>
        /// Clear the Client SessionToken which allows this Client to call API calls requiring login.
        /// A new/fresh login will be required after calling this.
        /// </summary>
        public static void ForgetClientCredentials()
        {
            PlayFabHttp.ForgetClientCredentials();
        }
<%}%>
<% for(var i in api.calls) { var apiCall = api.calls[i]; %><%- generateSummary("        ", apiCall, "summary") %><%- getDeprecationAttribute("        ", apiCall)
%>        public static void <%- apiCall.name %>(<%- apiCall.request %> request, Action<<%- apiCall.result %>> resultCallback, Action<PlayFabError> errorCallback, object customData = null, Dictionary<string, string> extraHeaders = null)
        {
<%- getRequestActions("            ", apiCall, api) %>
            PlayFabHttp.MakeApiCall("/<%- api.name %>/<%- apiCall.name %>", request, <%- getAuthParams(apiCall) %>, resultCallback, errorCallback, customData, extraHeaders);
        }<%- getCustomApiFunction("        ", apiCall) %>

<% } %>
    }
}
#endif
