using System;
using PlayFab.Json;
using PlayFab.<%- api.name %>Models;
using PlayFab.Internal;

namespace PlayFab
{
<% if(api.description) { %>    /// <summary>
    /// <%- api.description %>
    /// </summary>
<% } %>    public class PlayFab<%- api.name %>API
    {
<% for(var i in api.calls) { var apiCall = api.calls[i]; %>        public delegate void <%- apiCall.name %>Callback(<%- apiCall.result%> result);
<% } %>

<% for(var i in api.calls) { var apiCall = api.calls[i]; %><% if(apiCall.summary) { %>        /// <summary>
        /// <%- apiCall.summary %>
        /// </summary>
<% } %>        public static void <%- apiCall.name %>(<%- apiCall.request %> request, <%- apiCall.name %>Callback resultCallback, ErrorCallback errorCallback, object customData = null)
        {
            <%- getRequestActions(apiCall, api) %>
            string serializedJSON = JsonConvert.SerializeObject(request, Util.JsonFormatting, Util.JsonSettings);
            Action<string,PlayFabError> callback = delegate(string responseStr, PlayFabError pfError)
            {
                <%- apiCall.result %> result = null;
                ResultContainer<<%- apiCall.result %>>.HandleResults(responseStr, ref pfError, out result);
                if(pfError != null && errorCallback != null)
                {
                    errorCallback(pfError);
                }
                if(result != null)
                {
                    <%- getResultActions(apiCall, api) %>
                    result.CustomData = customData;
                    result.Request = request;
                    if(resultCallback != null)
                    {
                        resultCallback(result);
                    }
                }
            };
            PlayFabHTTP.Post(<%- getUrlAccessor(apiCall) %>+"<%- apiCall.url %>", serializedJSON, <%- getAuthParams(apiCall) %>, callback);
        }

<% } %><% if(authKey) { %>        private static string AuthKey = null;
        // Determine if the AuthKey is set, without actually making it public
        public static bool IsClientLoggedIn()
        {
            return !string.IsNullOrEmpty(AuthKey);
        }

        public static void MultiStepClientLogin(LoginResult result) // TODO: This will be a sub-object inside the result, but for now, to ensure it's being called correctly
        {
            // Stub for automatically sequencing another API-call after every login call.
            UnityEngine.Debug.Log("TODO: Send ASI value when appropriate: " + PlayFab.PlayFabSettings.advertisingIdType + "=" + PlayFab.PlayFabSettings.advertisingIdValue);
            if (!string.IsNullOrEmpty(PlayFab.PlayFabSettings.advertisingIdType) && !string.IsNullOrEmpty(PlayFab.PlayFabSettings.advertisingIdType))
            {
            }
        }

        public static void MultiStepClientLogin(RegisterPlayFabUserResult result) // TODO: This will be a sub-object inside the result, but for now, to ensure it's being called correctly
        {
            // Stub for automatically sequencing another API-call after every login call.
            UnityEngine.Debug.Log("TODO: Send ASI value when appropriate: " + PlayFab.PlayFabSettings.advertisingIdType + "=" + PlayFab.PlayFabSettings.advertisingIdValue);
            if (!string.IsNullOrEmpty(PlayFab.PlayFabSettings.advertisingIdType) && !string.IsNullOrEmpty(PlayFab.PlayFabSettings.advertisingIdType))
            {
            }
        }<% } %>
    }
}
