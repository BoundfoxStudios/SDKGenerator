using System;
using PlayFab.Json;
using PlayFab.<%- api.name %>Models;
using PlayFab.Internal;

namespace PlayFab
{
	<% if(api.description) { %>
	/// <summary>
	/// <%- api.description %>
	/// </summary><% } %>
	public class PlayFab<%- api.name %>API
	{
		<% for(var i in api.calls) { var apiCall = api.calls[i]; %>public delegate void <%- apiCall.name %>Callback(<%- apiCall.result%> result);
		<% } %>
		
		<% for(var i in api.calls) { var apiCall = api.calls[i]; %>
		<% if(apiCall.summary) { %>
		/// <summary>
		/// <%- apiCall.summary %>
		/// </summary><% } %>
		public static void <%- apiCall.name %>(<%- apiCall.request %> request, <%- apiCall.name %>Callback resultCallback, ErrorCallback errorCallback, object customData = null)
		{
			<%- getRequestActions(apiCall, api) %>
			string serializedJSON = JsonConvert.SerializeObject(request, Util.JsonFormatting, Util.JsonSettings);
			Action<string,string> callback = delegate(string responseStr, string errorStr)
			{
				<%- apiCall.result %> result = null;
				PlayFabError error = null;
				ResultContainer<<%- apiCall.result %>>.HandleResults(responseStr, errorStr, out result, out error);
				if(error != null && errorCallback != null)
				{
					errorCallback(error);
				}
				if(result != null)
				{
					<%- getResultActions(apiCall, api) %>
					<% if(apiCall.result != "ModifyUserVirtualCurrencyResult") { %>
					result.CustomData = customData;
					result.Request = request;
					<% } %>
					if(resultCallback != null)
					{
						resultCallback(result);
					}
				}
			};
			PlayFabHTTP.Post(<%- getUrlAccessor(apiCall) %>+"<%- apiCall.url %>", serializedJSON, <%- getAuthParams(apiCall) %>, callback);
		}<% } %>
		
		
        <% if(authKey) { %>
		private static string AuthKey = null;
        // Determine if the AuthKey is set, without actually making it public
        public static bool IsClientLoggedIn()
        {
            return !string.IsNullOrEmpty(AuthKey);
        }
		<% } %>

	}
}

