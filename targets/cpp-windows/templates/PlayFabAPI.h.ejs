#ifndef PLAYFAB_<%- api.name.toUpperCase() %>API_H_
#define PLAYFAB_<%- api.name.toUpperCase() %>API_H_

#include "playfab/IHttpRequester.h"
#include "playfab/PlayFabError.h"
#include "playfab/PlayFabDataModels.h"
#include "playfab/PlayFabSettings.h"

#include <string>


namespace PlayFab
{
	
    
    class PlayFab<%- api.name %>API
    {
    public:
		
		<% for(var i in api.calls) { var apiCall = api.calls[i]; %>typedef void(*<%- apiCall.name %>Callback)(<%- apiCall.result%>& result, void* userData);
		<% } %>
	
        PlayFab<%- api.name %>API();
        PlayFab<%- api.name %>API(IHttpRequester* requester, bool ownRequester);
        ~PlayFab<%- api.name %>API();

        IHttpRequester* GetRequester(bool relinquishOwnership = false);
        void Update();

        // ------------ Generated API calls
		<% for(var i in api.calls) { var apiCall = api.calls[i]; if(hasRequest(apiCall, api)) { %>
		void <%- apiCall.name %>(<%- apiCall.request %>& request, <%- apiCall.name %>Callback callback, ErrorCallback errorCallback = NULL, void* userData = NULL);
		<% } else {%>
		void <%- apiCall.name %>(<%- apiCall.name %>Callback callback, ErrorCallback errorCallback = NULL, void* userData = NULL);
		<% } } %>

    private:

        // ------------ Generated result handlers
		<% for(var i in api.calls) { var apiCall = api.calls[i]; %>
		static void On<%- apiCall.name %>Result(int httpStatus, HttpRequest* request, void* userData);
		<% } %>
 
        bool mOwnsRequester;
        IHttpRequester* mHttpRequester;
		
		<% if(authKey) { %>
        std::string mUserSessionTicket;
		<% } %>
    };

};

#endif