#include "playfab/PlayFab<%- api.name %>API.h"
#include "playfab/HttpRequest.h"
#include "playfab/PlayFabSettings.h"
#include "playfab/PlayFabResultHandler.h"
#include "playfab/HttpRequesterCURL.h"
#include "playfab/PlayFabVersion.h"

#include <string>


using namespace PlayFab;
using namespace PlayFab::<%- api.name %>Models;

PlayFab<%- api.name %>API::PlayFab<%- api.name %>API()
    : PlayFab<%- api.name %>API(NULL, false)
{
   
}

PlayFab<%- api.name %>API::PlayFab<%- api.name %>API(IHttpRequester* requester, bool ownRequester)
    : mHttpRequester(requester), mOwnsRequester(ownRequester)
{
    if(mHttpRequester == NULL)
    {
        mOwnsRequester = true;
        mHttpRequester = new HttpRequesterCURL();
    }

}



PlayFab<%- api.name %>API::~PlayFab<%- api.name %>API()
{
    if(mOwnsRequester && mHttpRequester != NULL)
    {
        delete mHttpRequester;
        mOwnsRequester = false;
        mHttpRequester = NULL;
    }
}



IHttpRequester* PlayFab<%- api.name %>API::GetRequester(bool relinquishOwnership /* = false*/)
{
    if(relinquishOwnership)
    {
        mOwnsRequester = false;
    }
    return mHttpRequester;
}

void PlayFab<%- api.name %>API::Update()
{
    if(mHttpRequester != NULL)
    {
        mHttpRequester->UpdateRequests();
    }
}

<% for(var i in api.calls) { var apiCall = api.calls[i]; %>
void PlayFab<%- api.name %>API::<%- apiCall.name %>(
    <% if(hasRequest(apiCall, api)) { %><%- apiCall.request %>& request,<% } %>
    <%- apiCall.name %>Callback callback,
    ErrorCallback errorCallback,
    void* userData
    )
{
    <%- getRequestActions(apiCall, api) %>
    HttpRequest* httpRequest = new HttpRequest("POST", <%- getUrlAccessor(apiCall) %>);
    httpRequest->SetHeader("Content-Type", "application/json");
	httpRequest->SetHeader("X-PlayFabSDK", PlayFabVersionString);
	<%- getAuthParams(apiCall) %>
	
    httpRequest->SetResultCallback((void*)callback);
    httpRequest->SetErrorCallback(errorCallback);
    httpRequest->SetUserData(userData);

    <% if(hasRequest(apiCall, api)) { %>httpRequest->SetBody(request.toJSONString());<% } else { %>httpRequest->SetBody("{}");<% } %>
    httpRequest->CompressBody();

    mHttpRequester->AddRequest(httpRequest, On<%- apiCall.name %>Result, this);
}

void PlayFab<%- api.name %>API::On<%- apiCall.name %>Result(int httpStatus, HttpRequest* request, void* userData)
{
    <%- apiCall.result%> outResult;
    PlayFabError errorResult;

    bool success = PlayFabRequestHandler::DecodeRequest(httpStatus, request, userData, outResult, errorResult);

    if (success)
    {
        <%- getResultActions(apiCall, api) %>

        if (request->GetResultCallback() != NULL)
        {
            <%- apiCall.name %>Callback successCallback = (<%- apiCall.name %>Callback)(request->GetResultCallback());
            successCallback(outResult, request->GetUserData());
        }
    }
    else
    {
        if (PlayFabSettings::globalErrorHandler != NULL)
        {
            PlayFabSettings::globalErrorHandler(errorResult, request->GetUserData());
        }

        if (request->GetErrorCallback() != NULL)
        {
            request->GetErrorCallback()(errorResult, request->GetUserData());
        }
    }

    delete request;
}

<% } %>


