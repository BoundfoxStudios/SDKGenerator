using PlayFab.Internal;
using System;
using System.Collections.Generic;
using System.Reflection;

namespace PlayFab
{
    public enum WebRequestType
    {
        UnityWww, // High compatability Unity api calls
        HttpWebRequest, // High performance multi-threaded api calls
        CustomHttp //If this is used, you must set the Http to an IPlayFabHttp object.
    }

    [Flags]
    public enum PlayFabLogLevel
    {
        None = 0,
        Debug = 1,
        Info = 2,
        Warning = 4,
        Error = 8,
        All = Debug | Info | Warning | Error,
    }

    public static partial class PlayFabSettings
    {
        public const string SdkVersion = "<%- sdkVersion %>";
        public const string BuildIdentifier = "<%- buildIdentifier %>";
        public const string VersionString = "UnitySDK-<%- sdkVersion %>";

#if ENABLE_PLAYFABSERVER_API || ENABLE_PLAYFABADMIN_API
        public static string DeveloperSecretKey
        {
            set { PlayFabHttp._devKey = value; }
            internal get { return PlayFabHttp._devKey; }
        }
#endif


        public static string ProductionEnvironmentUrl = ".playfabapi.com";
        public static string TitleId = null; // You must set this value for PlayFabSdk to work properly (Found in the Game Manager for your title, at the PlayFab Website)
        public static PlayFabLogLevel LogLevel = PlayFabLogLevel.Warning | PlayFabLogLevel.Error;
        public static WebRequestType RequestType = WebRequestType.UnityWww;
        public static int RequestTimeout = 2000;
        public static bool RequestKeepAlive = true;
        public static bool CompressApiData = true;
        public static bool IsTesting = false; //TODO: get rid of this.

        //For realtime logging.
        public static IPlayFabTailLogger Logger;
        public static string LoggerHost = "";
        public static int LoggerPort = 0;
        public static bool EnableRealTimeLogging = false;
        public static int LogCapLimit = 30;

#if !DISABLE_PLAYFABCLIENT_API
        private static string GetLogicUrl(string apiCall)
        {
            return LogicServerUrl + apiCall;
        }
#endif

        public static string GetFullUrl(string apiCall)
        {
#if !DISABLE_PLAYFABCLIENT_API
            if (apiCall == "/Client/RunCloudScript")
            {
                return GetLogicUrl(apiCall);
            }
            else
#endif
            if (!IsTesting)
            {
                string baseUrl = ProductionEnvironmentUrl;
                if (baseUrl.StartsWith("http"))
                    return baseUrl;
                return "https://" + TitleId + baseUrl + apiCall;
            }
            else
            {
                return "http://localhost:11289/" + apiCall;
            }
        }
    }
}
