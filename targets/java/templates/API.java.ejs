package com.playfab;

import com.playfab.internal.*;
import com.playfab.PlayFab<%- api.name %>Models.*;
import com.playfab.PlayFabErrors.*;
import com.playfab.PlayFabSettings;
import java.util.concurrent.*;
import java.util.*;
import com.google.gson.*;
import com.google.gson.reflect.*;

<% if(api.description) { %>
/**
 * <%- api.description %>
 */<% } %>
public class PlayFab<%- api.name %>API {
    private static Gson gson = new GsonBuilder().setDateFormat("yyyy-MM-dd'T'HH:mm:ss.SSS'Z'").create();
<% for(var i in api.calls) { var apiCall = api.calls[i]; %><% if(apiCall.summary) { %>
    /**
     * <%- apiCall.summary %>
     */<% } %>
    @SuppressWarnings("unchecked")
    public static FutureTask<PlayFabResult<<%- apiCall.result %>>> <%- apiCall.name %>Async(final <%- apiCall.request %> request) {
        return new FutureTask(new Callable<PlayFabResult<<%- apiCall.result %>>>() {
            public PlayFabResult<<%- apiCall.result %>> call() throws Exception {
                return private<%- apiCall.name %>Async(request);
            }
        });
    }

    <% if(apiCall.summary) { %>/**
     * <%- apiCall.summary %>
     */<% } %>
    @SuppressWarnings("unchecked")
    public static PlayFabResult<<%- apiCall.result %>> <%- apiCall.name %>(final <%- apiCall.request %> request) {
        FutureTask<PlayFabResult<<%- apiCall.result %>>> task = new FutureTask(new Callable<PlayFabResult<<%- apiCall.result %>>>() {
            public PlayFabResult<<%- apiCall.result %>> call() throws Exception {
                return private<%- apiCall.name %>Async(request);
            }
        });
        try {
            task.run();
            return task.get();
        } catch(Exception e) {
            return null;
        }
    }

    <% if(apiCall.summary) { %>/**
     * <%- apiCall.summary %>
     */<% } %>
    @SuppressWarnings("unchecked")
    private static PlayFabResult<<%- apiCall.result %>> private<%- apiCall.name %>Async(final <%- apiCall.request %> request) throws Exception {
<%- getRequestActions(apiCall, api) %>
        FutureTask<Object> task = PlayFabHTTP.doPost(<%- getUrlAccessor(apiCall) %> + "<%- apiCall.url %>", request, <%- getAuthParams(apiCall) %>);
        task.run();
        Object httpResult = task.get();
        if(httpResult instanceof PlayFabError) {
            PlayFabError error = (PlayFabError)httpResult;
            if (PlayFabSettings.GlobalErrorHandler != null)
                PlayFabSettings.GlobalErrorHandler.callback(error);
            PlayFabResult result = new PlayFabResult<<%- apiCall.result %>>();
            result.Error = error;
            return result;
        }
        String resultRawJson = (String) httpResult;

        PlayFabJsonSuccess<<%- apiCall.result %>> resultData = gson.fromJson(resultRawJson, new TypeToken<PlayFabJsonSuccess<<%- apiCall.result %>>>(){}.getType());
        <%- apiCall.result %> result = resultData.data;
<%- getResultActions(apiCall, api) %>
        PlayFabResult<<%- apiCall.result %>> pfResult = new PlayFabResult<<%- apiCall.result %>>();
        pfResult.Result = result;
        return pfResult;
    }
<% } %><% if(hasClientOptions) { %>
    public static void MultiStepClientLogin(Boolean needsAttribution) {
        if (needsAttribution && !PlayFabSettings.DisableAdvertising && PlayFabSettings.AdvertisingIdType != null && PlayFabSettings.AdvertisingIdValue != null)
        {
            PlayFabClientModels.AttributeInstallRequest request = new PlayFabClientModels.AttributeInstallRequest();
            if (PlayFabSettings.AdvertisingIdType == PlayFabSettings.AD_TYPE_IDFA)
                request.Idfa = PlayFabSettings.AdvertisingIdValue;
            else if (PlayFabSettings.AdvertisingIdType == PlayFabSettings.AD_TYPE_ANDROID_ID)
                request.Android_Id = PlayFabSettings.AdvertisingIdValue;
            else
                return;
            FutureTask<PlayFabResult<AttributeInstallResult>> task = AttributeInstallAsync(request);
            task.run();
        }
    }

    private static String _authKey = null;
<% } %>}
